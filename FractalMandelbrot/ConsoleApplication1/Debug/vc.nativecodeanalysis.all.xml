<?xml version="1.0" encoding="utf-8"?><DEFECTS><DEFECT>
    <SFA>
      <FILEPATH>c:\users\gamingchamptv\source\repos\consoleapplication1\consoleapplication1</FILEPATH>
      <FILENAME>bitmap.cpp</FILENAME>
      <LINE>39</LINE>
      <COLUMN>51</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>fractal::Bitmap::write</FUNCTION>
    <DECORATED>?write@Bitmap@fractal@@QAE_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z</DECORATED>
    <FUNCLINE>17</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\gamingchamptv\source\repos\consoleapplication1\consoleapplication1</FILEPATH>
      <FILENAME>bitmap.cpp</FILENAME>
      <LINE>39</LINE>
      <COLUMN>43</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '*' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '*' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>fractal::Bitmap::write</FUNCTION>
    <DECORATED>?write@Bitmap@fractal@@QAE_NV?$basic_string@DU?$char_traits@D@std@@V?$allocator@D@2@@std@@@Z</DECORATED>
    <FUNCLINE>17</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\gamingchamptv\source\repos\consoleapplication1\consoleapplication1</FILEPATH>
      <FILENAME>bitmapfileheader.h</FILENAME>
      <LINE>16</LINE>
      <COLUMN>1</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'fractal::BitmapFileHeader::dataOffset' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>fractal::BitmapFileHeader::{ctor}</FUNCTION>
    <DECORATED>??0BitmapFileHeader@fractal@@QAE@XZ</DECORATED>
    <FUNCLINE>16</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\gamingchamptv\source\repos\consoleapplication1\consoleapplication1</FILEPATH>
      <FILENAME>bitmapinfoheader.h</FILENAME>
      <LINE>23</LINE>
      <COLUMN>1</COLUMN>
    </SFA>
    <DEFECTCODE>26495</DEFECTCODE>
    <DESCRIPTION>Variable 'fractal::BitmapInfoHeader::height' is uninitialized. Always initialize a member variable (type.6).</DESCRIPTION>
    <FUNCTION>fractal::BitmapInfoHeader::{ctor}</FUNCTION>
    <DECORATED>??0BitmapInfoHeader@fractal@@QAE@XZ</DECORATED>
    <FUNCLINE>23</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\gamingchamptv\source\repos\consoleapplication1\consoleapplication1</FILEPATH>
      <FILENAME>main.cpp</FILENAME>
      <LINE>46</LINE>
      <COLUMN>36</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '-' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '-' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>main</FUNCTION>
    <DECORATED>main</DECORATED>
    <FUNCLINE>31</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\gamingchamptv\source\repos\consoleapplication1\consoleapplication1</FILEPATH>
      <FILENAME>main.cpp</FILENAME>
      <LINE>46</LINE>
      <COLUMN>24</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '-' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '-' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>main</FUNCTION>
    <DECORATED>main</DECORATED>
    <FUNCLINE>31</FUNCLINE>
    <PATH></PATH>
  </DEFECT><DEFECT>
    <SFA>
      <FILEPATH>c:\users\gamingchamptv\source\repos\consoleapplication1\consoleapplication1</FILEPATH>
      <FILENAME>main.cpp</FILENAME>
      <LINE>47</LINE>
      <COLUMN>24</COLUMN>
    </SFA>
    <DEFECTCODE>26451</DEFECTCODE>
    <DESCRIPTION>Arithmetic overflow: Using operator '-' on a 4 byte value and then casting the result to a 8 byte value. Cast the value to the wider type before calling operator '-' to avoid overflow (io.2).</DESCRIPTION>
    <FUNCTION>main</FUNCTION>
    <DECORATED>main</DECORATED>
    <FUNCLINE>31</FUNCLINE>
    <PATH></PATH>
  </DEFECT></DEFECTS>